{
  "name": "Editor",
  "methods": [
    {
      "name": "above",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ at?: Range | Path | Point; match?: ((node: Node) => boolean) | ((node: Node) => node is T); mode?: \"highest\" | \"lowest\"; voids?: boolean; }"
        }
      ],
      "documentation": "Get the ancestor above a location in the document.",
      "returnType": "NodeEntry<T>",
      "typeParameters": [
        "T"
      ]
    },
    {
      "name": "addMark",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "key",
          "documentation": "",
          "isOptional": false,
          "type": "string"
        },
        {
          "name": "value",
          "documentation": "",
          "isOptional": false,
          "type": "any"
        }
      ],
      "documentation": "Add a custom property to the leaf text nodes in the current selection.\r\n\r\nIf the selection is currently collapsed, the marks will be added to the\r\n`editor.marks` property instead, and applied when text is inserted next.",
      "returnType": "void"
    },
    {
      "name": "after",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ distance?: number; unit?: \"character\" | \"word\" | \"line\" | \"block\" | \"offset\"; }"
        }
      ],
      "documentation": "Get the point after a location.",
      "returnType": "Point"
    },
    {
      "name": "before",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ distance?: number; unit?: \"character\" | \"word\" | \"line\" | \"block\" | \"offset\"; }"
        }
      ],
      "documentation": "Get the point before a location.",
      "returnType": "Point"
    },
    {
      "name": "deleteBackward",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ unit?: \"character\" | \"word\" | \"line\" | \"block\"; }"
        }
      ],
      "documentation": "Delete content in the editor backward from the current selection.",
      "returnType": "void"
    },
    {
      "name": "deleteForward",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ unit?: \"character\" | \"word\" | \"line\" | \"block\"; }"
        }
      ],
      "documentation": "Delete content in the editor forward from the current selection.",
      "returnType": "void"
    },
    {
      "name": "deleteFragment",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        }
      ],
      "documentation": "Delete the content in the current selection.",
      "returnType": "void"
    },
    {
      "name": "edges",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Get the start and end points of a location.",
      "returnType": "[Point, Point]"
    },
    {
      "name": "end",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Get the end point of a location.",
      "returnType": "Point"
    },
    {
      "name": "first",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Get the first node at a location.",
      "returnType": "NodeEntry<Node>"
    },
    {
      "name": "fragment",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Get the fragment at a location.",
      "returnType": "Descendant[]"
    },
    {
      "name": "hasBlocks",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "element",
          "documentation": "",
          "isOptional": false,
          "type": "Element"
        }
      ],
      "documentation": "Check if a node has block children.",
      "returnType": "boolean"
    },
    {
      "name": "hasInlines",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "element",
          "documentation": "",
          "isOptional": false,
          "type": "Element"
        }
      ],
      "documentation": "Check if a node has inline and text children.",
      "returnType": "boolean"
    },
    {
      "name": "hasTexts",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "element",
          "documentation": "",
          "isOptional": false,
          "type": "Element"
        }
      ],
      "documentation": "Check if a node has text children.",
      "returnType": "boolean"
    },
    {
      "name": "insertBreak",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        }
      ],
      "documentation": "Insert a block break at the current selection.\r\n\r\nIf the selection is currently expanded, it will be deleted first.",
      "returnType": "void"
    },
    {
      "name": "insertFragment",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "fragment",
          "documentation": "",
          "isOptional": false,
          "type": "Node[]"
        }
      ],
      "documentation": "Insert a fragment at the current selection.\r\n\r\nIf the selection is currently expanded, it will be deleted first.",
      "returnType": "void"
    },
    {
      "name": "insertNode",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "node",
          "documentation": "",
          "isOptional": false,
          "type": "Node"
        }
      ],
      "documentation": "Insert a node at the current selection.\r\n\r\nIf the selection is currently expanded, it will be deleted first.",
      "returnType": "void"
    },
    {
      "name": "insertText",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "text",
          "documentation": "",
          "isOptional": false,
          "type": "string"
        }
      ],
      "documentation": "Insert text at the current selection.\r\n\r\nIf the selection is currently expanded, it will be deleted first.",
      "returnType": "void"
    },
    {
      "name": "isBlock",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "value",
          "documentation": "",
          "isOptional": false,
          "type": "any"
        }
      ],
      "documentation": "Check if a value is a block `Element` object.",
      "returnType": "boolean"
    },
    {
      "name": "isEditor",
      "args": [
        {
          "name": "value",
          "documentation": "",
          "isOptional": false,
          "type": "any"
        }
      ],
      "documentation": "Check if a value is an `Editor` object.",
      "returnType": "boolean"
    },
    {
      "name": "isEnd",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "point",
          "documentation": "",
          "isOptional": false,
          "type": "Point"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Check if a point is the end point of a location.",
      "returnType": "boolean"
    },
    {
      "name": "isEdge",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "point",
          "documentation": "",
          "isOptional": false,
          "type": "Point"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Check if a point is an edge of a location.",
      "returnType": "boolean"
    },
    {
      "name": "isEmpty",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "element",
          "documentation": "",
          "isOptional": false,
          "type": "Element"
        }
      ],
      "documentation": "Check if an element is empty, accounting for void nodes.",
      "returnType": "boolean"
    },
    {
      "name": "isInline",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "value",
          "documentation": "",
          "isOptional": false,
          "type": "any"
        }
      ],
      "documentation": "Check if a value is an inline `Element` object.",
      "returnType": "boolean"
    },
    {
      "name": "isNormalizing",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        }
      ],
      "documentation": "Check if the editor is currently normalizing after each operation.",
      "returnType": "boolean"
    },
    {
      "name": "isStart",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "point",
          "documentation": "",
          "isOptional": false,
          "type": "Point"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Check if a point is the start point of a location.",
      "returnType": "boolean"
    },
    {
      "name": "isVoid",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "value",
          "documentation": "",
          "isOptional": false,
          "type": "any"
        }
      ],
      "documentation": "Check if a value is a void `Element` object.",
      "returnType": "boolean"
    },
    {
      "name": "last",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Get the last node at a location.",
      "returnType": "NodeEntry<Node>"
    },
    {
      "name": "leaf",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ depth?: number; edge?: \"start\" | \"end\"; }"
        }
      ],
      "documentation": "Get the leaf text node at a location.",
      "returnType": "NodeEntry<Text>"
    },
    {
      "name": "levels",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ at?: Range | Path | Point; match?: ((node: Node) => boolean) | ((node: Node) => node is T_1); reverse?: boolean; voids?: boolean; }"
        }
      ],
      "documentation": "Iterate through all of the levels at a location.",
      "returnType": "Iterable<NodeEntry<T_1>>",
      "typeParameters": [
        "T_1"
      ]
    },
    {
      "name": "marks",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        }
      ],
      "documentation": "Get the marks that would be added to text at the current selection.",
      "returnType": "Record<string, any>"
    },
    {
      "name": "next",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ at?: Range | Path | Point; match?: ((node: Node) => boolean) | ((node: Node) => node is T_2); mode?: \"highest\" | \"lowest\" | \"all\"; voids?: boolean; }"
        }
      ],
      "documentation": "Get the matching node in the branch of the document after a location.",
      "returnType": "NodeEntry<T_2>",
      "typeParameters": [
        "T_2"
      ]
    },
    {
      "name": "node",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ depth?: number; edge?: \"start\" | \"end\"; }"
        }
      ],
      "documentation": "Get the node at a location.",
      "returnType": "NodeEntry<Node>"
    },
    {
      "name": "nodes",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ at?: Range | Path | Point | Span; match?: ((node: Node) => boolean) | ((node: Node) => node is T_3); mode?: \"highest\" | \"lowest\" | \"all\"; universal?: boolean; reverse?: boolean; voids?: boolean; }"
        }
      ],
      "documentation": "Iterate through all of the nodes in the Editor.",
      "returnType": "Iterable<NodeEntry<T_3>>",
      "typeParameters": [
        "T_3"
      ]
    },
    {
      "name": "normalize",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ force?: boolean; }"
        }
      ],
      "documentation": "Normalize any dirty objects in the editor.",
      "returnType": "void"
    },
    {
      "name": "parent",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ depth?: number; edge?: \"start\" | \"end\"; }"
        }
      ],
      "documentation": "Get the parent node of a location.",
      "returnType": "NodeEntry<Ancestor>"
    },
    {
      "name": "path",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ depth?: number; edge?: \"start\" | \"end\"; }"
        }
      ],
      "documentation": "Get the path of a location.",
      "returnType": "Path"
    },
    {
      "name": "pathRef",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "path",
          "documentation": "",
          "isOptional": false,
          "type": "Path"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ affinity?: \"backward\" | \"forward\"; }"
        }
      ],
      "documentation": "Create a mutable ref for a `Path` object, which will stay in sync as new\r\noperations are applied to the editor.",
      "returnType": "PathRef"
    },
    {
      "name": "pathRefs",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        }
      ],
      "documentation": "Get the set of currently tracked path refs of the editor.",
      "returnType": "Set<PathRef>"
    },
    {
      "name": "point",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ edge?: \"start\" | \"end\"; }"
        }
      ],
      "documentation": "Get the start or end point of a location.",
      "returnType": "Point"
    },
    {
      "name": "pointRef",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "point",
          "documentation": "",
          "isOptional": false,
          "type": "Point"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ affinity?: \"backward\" | \"forward\"; }"
        }
      ],
      "documentation": "Create a mutable ref for a `Point` object, which will stay in sync as new\r\noperations are applied to the editor.",
      "returnType": "PointRef"
    },
    {
      "name": "pointRefs",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        }
      ],
      "documentation": "Get the set of currently tracked point refs of the editor.",
      "returnType": "Set<PointRef>"
    },
    {
      "name": "positions",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ at?: Range | Path | Point; unit?: \"character\" | \"word\" | \"line\" | \"block\" | \"offset\"; reverse?: boolean; }"
        }
      ],
      "documentation": "Iterate through all of the positions in the document where a `Point` can be\r\nplaced.\r\n\r\nBy default it will move forward by individual offsets at a time,  but you\r\ncan pass the `unit: 'character'` option to moved forward one character, word,\r\nor line at at time.\r\n\r\nNote: void nodes are treated as a single point, and iteration will not\r\nhappen inside their content.",
      "returnType": "Iterable<Point>"
    },
    {
      "name": "previous",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ at?: Range | Path | Point; match?: ((node: Node) => boolean) | ((node: Node) => node is T_4); mode?: \"highest\" | \"lowest\" | \"all\"; voids?: boolean; }"
        }
      ],
      "documentation": "Get the matching node in the branch of the document before a location.",
      "returnType": "NodeEntry<T_4>",
      "typeParameters": [
        "T_4"
      ]
    },
    {
      "name": "range",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        },
        {
          "name": "to",
          "documentation": "",
          "isOptional": true,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Get a range of a location.",
      "returnType": "Range"
    },
    {
      "name": "rangeRef",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "range",
          "documentation": "",
          "isOptional": false,
          "type": "Range"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ affinity?: \"backward\" | \"forward\" | \"outward\" | \"inward\"; }"
        }
      ],
      "documentation": "Create a mutable ref for a `Range` object, which will stay in sync as new\r\noperations are applied to the editor.",
      "returnType": "RangeRef"
    },
    {
      "name": "rangeRefs",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        }
      ],
      "documentation": "Get the set of currently tracked range refs of the editor.",
      "returnType": "Set<RangeRef>"
    },
    {
      "name": "removeMark",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "key",
          "documentation": "",
          "isOptional": false,
          "type": "string"
        }
      ],
      "documentation": "Remove a custom property from all of the leaf text nodes in the current\r\nselection.\r\n\r\nIf the selection is currently collapsed, the removal will be stored on\r\n`editor.marks` and applied to the text inserted next.",
      "returnType": "void"
    },
    {
      "name": "start",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Get the start point of a location.",
      "returnType": "Point"
    },
    {
      "name": "string",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "at",
          "documentation": "",
          "isOptional": false,
          "type": "Range | Path | Point"
        }
      ],
      "documentation": "Get the text string content of a location.\r\n\r\nNote: the text of void nodes is presumed to be an empty string, regardless\r\nof what their actual content is.",
      "returnType": "string"
    },
    {
      "name": "transform",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "op",
          "documentation": "",
          "isOptional": false,
          "type": "Operation"
        }
      ],
      "documentation": "Transform the editor by an operation.",
      "returnType": "void"
    },
    {
      "name": "unhangRange",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "range",
          "documentation": "",
          "isOptional": false,
          "type": "Range"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ voids?: boolean; }"
        }
      ],
      "documentation": "Convert a range into a non-hanging one.",
      "returnType": "Range"
    },
    {
      "name": "void",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "options",
          "documentation": "",
          "isOptional": true,
          "type": "{ at?: Range | Path | Point; mode?: \"highest\" | \"lowest\"; voids?: boolean; }"
        }
      ],
      "documentation": "Match a void node in the current branch of the editor.",
      "returnType": "NodeEntry<Element>"
    },
    {
      "name": "withoutNormalizing",
      "args": [
        {
          "name": "editor",
          "documentation": "",
          "isOptional": false,
          "type": "Editor"
        },
        {
          "name": "fn",
          "documentation": "",
          "isOptional": false,
          "type": "() => void"
        }
      ],
      "documentation": "Call a function, deferring normalization until after it completes.",
      "returnType": "void"
    }
  ]
}
