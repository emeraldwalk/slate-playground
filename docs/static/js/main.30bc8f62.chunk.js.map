{"version":3,"sources":["components/App.tsx","serviceWorker.ts","index.tsx"],"names":["initialValue","Value","fromJS","document","nodes","object","text","type","initialState","moveToStartOfDocument","moveToEndOfDocument","moveAnchorForward","moveFocusForward","moveStartForward","moveEndForward","reducer","state","action","payload","onClick","editor","method","args","focus","App","editorRef","useRef","useState","value","setValue","useReducer","dispatch","useEffect","current","className","onChange","ref","JSON","stringify","toJS","undefined","Object","keys","map","key","arg","i","currentTarget","slice","join","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAIMA,E,KAAsBC,EAAMC,OAAO,CACvCC,SAAU,CACRC,MAAO,CACL,CACEA,MAAO,CACL,CACEC,OAAQ,OACRC,KAAM,YAGVD,OAAQ,QACRE,KAAM,aAER,CACEH,MAAO,CACL,CACEC,OAAQ,OACRC,KAAM,YAGVD,OAAQ,QACRE,KAAM,iBAmBRC,EAAsB,CAC1BC,sBAAuB,GACvBC,oBAAqB,GACrBC,kBAAmB,CAAC,GACpBC,iBAAkB,CAAC,GACnBC,iBAAkB,CAAC,GACnBC,eAAgB,CAAC,IAGnB,SAASC,EACPC,EACAC,GAEA,OAAO,eACFD,EADL,eAEGC,EAAOV,KAAOU,EAAOC,UAI1B,SAASC,EACPC,EACAC,GAEC,IAAD,uBADGC,EACH,iCADGA,EACH,kBACA,OAAO,WACC,OAANF,QAAM,IAANA,KAASC,GAAT,MAAAD,EAAoBE,GACd,OAANF,QAAM,IAANA,KAAQG,SAIZ,IAsEeC,EAtEO,WACpB,IAAMC,EAAYC,iBAAe,MADP,EAEAC,mBAAS3B,GAFT,mBAEnB4B,EAFmB,KAEZC,EAFY,OAIAC,qBAAWf,EAASP,GAJpB,mBAInBQ,EAJmB,KAIZe,EAJY,KAU1B,OAJAC,qBAAU,WAAO,IAAD,EACd,UAAAP,EAAUQ,eAAV,SAAmBV,UAClB,IAGD,yBAAKW,UAAU,SACb,yDAEA,kBAAC,IAAD,CACEA,UAAU,WACVC,SAAU,YAA+B,IAA5BP,EAA2B,EAA3BA,MACXC,EAASD,IAEXQ,IAAKX,EACLG,MAAOA,IAGT,yBAAKM,UAAU,OACb,yBAAKA,UAAU,WACZG,KAAKC,UAAUV,EAAMW,YAAQC,EAAW,IAG3C,yBAAKN,UAAU,cAEXO,OAAOC,KAAK1B,GAAO2B,KAAI,SAAAC,GACrB,IAAMtB,EAAON,EAAM4B,GAEnB,OACE,yBAAKV,UAAU,YAAYU,IAAKA,GAE3BtB,EAAmBqB,KAAI,SAACE,EAAKC,GAC5B,MAAsB,kBAARD,GAAmC,kBAARA,EACvC,2BACED,IAAKE,EACLX,SAAU,YAAwB,IAArBY,EAAoB,EAApBA,cACL7B,EAAUI,EAAK0B,QACrB9B,EAAQ4B,GAAKC,EAAcnB,MAO3BG,EALe,CACbxB,KAAMqC,EACN1B,aAKJU,MAAOiB,IAEP,QAGR,4BACE1B,QAASA,EAAO,WAAP,GAAQM,EAAUQ,QAAUW,GAA5B,mBAAmDtB,MAC5DsB,EAFF,IAEQtB,EAAK2B,KAAK,KAFlB,aCtHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrD,SAASsD,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.30bc8f62.chunk.js","sourcesContent":["import React, { useEffect, useReducer, useRef, useState } from 'react';\nimport { Editor, OnChangeParam } from 'slate-react';\nimport { Value } from 'slate';\n\nconst initialValue: Value = Value.fromJS({\n  document: {\n    nodes: [\n      {\n        nodes: [\n          {\n            object: 'text',\n            text: 'Block A'\n          },\n        ],\n        object: 'block',\n        type: 'paragraph',\n      },\n      {\n        nodes: [\n          {\n            object: 'text',\n            text: 'Block B'\n          },\n        ],\n        object: 'block',\n        type: 'paragraph',\n      }\n    ]\n  }\n});\n\ntype Action = {\n  [P in keyof State]: { type: P, payload: State[P] }\n}[keyof State];\n\ninterface State {\n  moveAnchorForward: [number],\n  moveEndForward: [number],\n  moveFocusForward: [number],\n  moveStartForward: [number],\n  moveToEndOfDocument: [],\n  moveToStartOfDocument: [],\n}\n\nconst initialState: State = {\n  moveToStartOfDocument: [],\n  moveToEndOfDocument: [],\n  moveAnchorForward: [1],\n  moveFocusForward: [1],\n  moveStartForward: [1],\n  moveEndForward: [1],\n};\n\nfunction reducer(\n  state: State,\n  action: Action,\n) {\n  return {\n    ...state,\n    [action.type]: action.payload,\n  };\n}\n\nfunction onClick<M extends keyof State>(\n  editor: Editor | null,\n  method: M,\n  ...args: State[M]\n) {\n  return function doOnClick() {\n    editor?.[method](...args);\n    editor?.focus();\n  }\n}\n\nconst App: React.FC = () => {\n  const editorRef = useRef<Editor>(null);\n  const [value, setValue] = useState(initialValue);\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    editorRef.current?.focus();\n  }, []);\n\n  return (\n    <div className=\"c_app\">\n      <h1>SlateJS Editor Playground</h1>\n\n      <Editor\n        className=\"c_editor\"\n        onChange={({ value }: OnChangeParam) => {\n          setValue(value);\n        }}\n        ref={editorRef}\n        value={value}\n      />\n\n      <div className=\"row\">\n        <pre className=\"c_value\">\n          {JSON.stringify(value.toJS(), undefined, 2)}\n        </pre>\n\n        <div className=\"c_controls\">\n          {\n            Object.keys(state).map(key => {\n              const args = state[key as keyof State];\n\n              return (\n                <div className=\"c_control\" key={key}>\n                  {\n                    (args as unknown[]).map((arg, i) => {\n                      return typeof arg === 'string' || typeof arg === 'number' ? (\n                        <input\n                          key={i}\n                          onChange={({ currentTarget }) => {\n                            const payload = args.slice();\n                            payload[i] = currentTarget.value as any;\n\n                            const action = {\n                              type: key,\n                              payload,\n                            } as Action;\n\n                            dispatch(action);\n                          }}\n                          value={arg}\n                        />\n                      ) : null\n                    })\n                  }\n                  <button\n                    onClick={onClick(editorRef.current!, key as keyof State, ...args)}\n                  >{key}({args.join(',')})\n                  </button>\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}