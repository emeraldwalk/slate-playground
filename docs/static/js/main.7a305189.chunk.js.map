{"version":3,"sources":["data/filter.ts","data/methods.ts","data/utils.ts","data/node.ts","data/value.ts","components/App.tsx","components/Document.tsx","components/Node.tsx","components/Selection.tsx","serviceWorker.ts","index.tsx"],"names":["useFilter","data","filterBy","filter","useCallback","method","toLowerCase","indexOf","useMemo","initialState","moveToStartOfDocument","moveToEndOfDocument","moveAnchorForward","moveFocusForward","moveStartForward","moveEndForward","moveStartToStartOfDocument","moveStartToEndOfDocument","moveEndToStartOfDocument","moveEndToEndOfDocument","moveAnchorToStartOfDocument","moveAnchorToEndOfDocument","moveFocusToStartOfDocument","moveFocusToEndOfDocument","moveToStartOfNextBlock","moveToEndOfNextBlock","splitBlock","insertText","reducer","state","action","type","payload","selectedTextNodes","value","stack","document","isInSelection","length","node","shift","key","selection","start","object","unshift","nodes","toArray","end","useDocument","selectedTextKeys","Array","from","map","n","nodeTree","selectedKeys","isSelected","_slateNode","childNodes","child","toJSON","every","initialValue","Value","fromJS","text","onClick","editor","args","focus","App","editorRef","useRef","useState","setValue","useValue","setFilterBy","useReducer","methodState","dispatch","additionalMethodNames","setAdditionalMethodNames","methodNames","Object","keys","useEffect","notInMethodNames","sort","useMethodState","current","filteredAdditionalMethodNames","filteredMethodNames","documentNode","onSelect","moveAnchorToStartOfNode","moveFocusToEndOfNode","className","onChange","ref","currentTarget","placeholder","arg","i","slice","argValue","isNaN","Number","a","stringifyArgs","Document","Node","rest","nodeStr","JSON","stringify","undefined","event","stopPropagation","replace","Fragment","Selection","selectionJson","toJS","anchor","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a305189.chunk.js","sourcesContent":["import { useCallback, useMemo } from 'react';\n\nexport function useFilter<\n  T extends string,\n>(\n  data: T[],\n  filterBy: string,\n) {\n  const filter = useCallback((method: string) => {\n    return filterBy === '' || method.toLowerCase().indexOf(filterBy.toLowerCase()) > -1;\n  }, [filterBy]);\n\n  return useMemo(\n    () => data.filter(filter),\n    [data, filter],\n  );\n}","import { useEffect, useMemo, useReducer, useState } from 'react';\nimport { Editor } from 'slate-react';\n\nexport type Action = {\n  [P in keyof State]: { type: P, payload: State[P] }\n}[keyof State];\n\nexport interface State {\n  insertText: [string],\n  moveAnchorForward: [number],\n  moveAnchorToEndOfDocument: [],\n  moveAnchorToStartOfDocument: [],\n  moveEndForward: [number],\n  moveEndToEndOfDocument: [],\n  moveEndToStartOfDocument: [],\n  moveFocusForward: [number],\n  moveFocusToEndOfDocument: [],\n  moveFocusToStartOfDocument: [],\n  moveStartForward: [number],\n  moveStartToEndOfDocument: [],\n  moveStartToStartOfDocument: [],\n  moveToEndOfDocument: [],\n  moveToStartOfDocument: [],\n  moveToStartOfNextBlock: [],\n  moveToEndOfNextBlock: [],\n  splitBlock: [number],\n}\n\nconst initialState: State = {\n  moveToStartOfDocument: [],\n  moveToEndOfDocument: [],\n  moveAnchorForward: [1],\n  moveFocusForward: [1],\n  moveStartForward: [1],\n  moveEndForward: [1],\n\n  moveStartToStartOfDocument: [],\n  moveStartToEndOfDocument: [],\n  moveEndToStartOfDocument: [],\n  moveEndToEndOfDocument: [],\n\n  moveAnchorToStartOfDocument: [],\n  moveAnchorToEndOfDocument: [],\n  moveFocusToStartOfDocument: [],\n  moveFocusToEndOfDocument: [],\n\n  moveToStartOfNextBlock: [],\n  moveToEndOfNextBlock: [],\n  splitBlock: [1],\n  insertText: [''],\n};\n\nfunction reducer(\n  state: State,\n  action: Action,\n) {\n  return {\n    ...state,\n    [action.type]: action.payload,\n  };\n}\n\nexport function useMethodState(\n  editor: Editor | null\n) {\n  const [methodState, dispatch] = useReducer(reducer, initialState);\n  const [additionalMethodNames, setAdditionalMethodNames] = useState<string[]>([]);\n\n  const methodNames = useMemo(\n    () => Object.keys(methodState) as (keyof State)[],\n    [methodState],\n  );\n\n  useEffect(() => {\n    if (editor) {\n      const notInMethodNames = Object\n        .keys(editor)\n        .filter(key => typeof editor[key as keyof Editor] === 'function' && !(key in methodState));\n\n      notInMethodNames.sort();\n\n      setAdditionalMethodNames(notInMethodNames);\n    }\n  }, [editor, methodState]);\n\n  return {\n    additionalMethodNames,\n    dispatch,\n    methodNames,\n    methodState,\n  };\n}","import {\n  Node as SlateNode,\n  NodeJSON,\n  Value,\n} from 'slate';\n\nexport type Node = { isSelected: boolean, nodes?: Node[], _slateNode: SlateNode } & NodeJSON;\n\n/**\n * Transform a Slate node tree into a data model.\n */\nexport function nodeTree(\n  node: SlateNode,\n  selectedKeys: string[]\n): Node {\n  if (node.object === 'text') {\n    return {\n      key: node.key,\n      isSelected: selectedKeys.indexOf(node.key) > -1,\n      object: node.object,\n      _slateNode: node,\n    };\n  }\n\n  const childNodes = node.nodes.toArray().map(\n    child => nodeTree(child, selectedKeys),\n  );\n\n  return {\n    key: node.key,\n    ...node.toJSON() as any,\n    isSelected: childNodes.every(childNodes => childNodes.isSelected),\n    nodes: childNodes,\n    _slateNode: node,\n  };\n}\n\n/**\n * Get an iterable that yields selected text nodes.\n * @param value\n */\nexport function* selectedTextNodes(value: Value): IterableIterator<SlateNode> {\n  const stack: SlateNode[] = [value.document];\n\n  let isInSelection = false;\n\n  while (stack.length > 0) {\n    const node = stack.shift()!;\n\n    if (node.key === value.selection.start.key) {\n      isInSelection = true;\n    }\n\n    if (node.object !== 'text') {\n      stack.unshift(...node.nodes.toArray());\n    }\n    else if (isInSelection) {\n      yield node;\n    }\n\n    if (node.key === value.selection.end.key) {\n      isInSelection = false;\n    }\n  }\n}","import { useMemo } from 'react';\nimport { Value } from 'slate';\nimport { nodeTree, selectedTextNodes } from './utils';\n\nexport function useDocument(\n  value: Value,\n) {\n  return useMemo(\n    () => {\n      const selectedTextKeys = Array.from(selectedTextNodes(value)).map(n => n.key);\n      return nodeTree(value.document, selectedTextKeys);\n    },\n    [value]\n  );\n}","import { useState } from 'react';\nimport { Value } from 'slate';\n\nconst initialValue: Value = Value.fromJS({\n  document: {\n    nodes: [\n      {\n        nodes: [\n          {\n            nodes: [\n              {\n                object: 'text',\n                text: 'Block A1',\n              },\n            ],\n            object: 'block',\n            type: 'paragraph',\n          },\n          {\n            nodes: [\n              {\n                object: 'text',\n                text: 'Block A2',\n              },\n            ],\n            object: 'block',\n            type: 'paragraph',\n          }\n        ],\n        object: 'block',\n        type: 'div',\n      },\n      {\n        nodes: [\n          {\n            object: 'text',\n            text: 'Block B',\n          },\n        ],\n        object: 'block',\n        type: 'paragraph',\n      },\n      {\n        nodes: [\n          {\n            object: 'text',\n            text: 'Block C'\n          },\n        ],\n        object: 'block',\n        type: 'paragraph',\n      }\n    ]\n  }\n});\n\nexport function useValue() {\n  const [value, setValue] = useState(initialValue);\n  return {\n    initialValue,\n    setValue,\n    value,\n  }\n}","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Editor, OnChangeParam } from 'slate-react';\nimport { Node as SlateNode } from 'slate';\nimport { Document, Selection } from '.';\nimport { useFilter } from '../data/filter';\nimport { Action, useMethodState, State } from '../data/methods';\nimport { useDocument } from '../data/node';\nimport { useValue } from '../data/value';\n\nfunction onClick<M extends keyof State>(\n  editor: Editor | null,\n  method: M,\n  ...args: State[M]\n) {\n  return function doOnClick() {\n    (editor?.[method] as any)(...args);\n    editor?.focus();\n  }\n}\n\nfunction stringifyArgs(args: unknown[]) {\n  return args.map(a => typeof a === 'string' ? `'${a}'` : a);\n}\n\nconst App: React.FC = () => {\n  const editorRef = useRef<Editor>(null);\n\n  const { initialValue, setValue, value } = useValue();\n  const [filterBy, setFilterBy] = useState('');\n\n  const {\n    additionalMethodNames,\n    dispatch,\n    methodNames,\n    methodState,\n  } = useMethodState(editorRef.current);\n\n  const filteredAdditionalMethodNames = useFilter(\n    additionalMethodNames,\n    filterBy\n  );\n\n  const filteredMethodNames = useFilter(\n    methodNames,\n    filterBy\n  );\n\n  const documentNode = useDocument(value);\n\n  const onSelect = useCallback((node: SlateNode) => {\n    editorRef.current!.moveAnchorToStartOfNode(node);\n    editorRef.current!.moveFocusToEndOfNode(node);\n\n    editorRef.current!.focus();\n  }, []);\n\n  useEffect(() => {\n    editorRef.current?.focus();\n  }, []);\n\n  return (\n    <div className=\"c_app\">\n      <h1>SlateJS Editor Playground</h1>\n\n      <div className=\"row\">\n        <Editor\n          className=\"c_editor\"\n          onChange={({ value }: OnChangeParam) => {\n            setValue(value);\n          }}\n          ref={editorRef}\n          value={value}\n        />\n        <button onClick={() => {\n          setValue(initialValue);\n        }}>Reset</button>\n      </div>\n\n      <div className=\"row\">\n        <Selection\n          selection={value.selection}\n        />\n\n        <Document\n          onSelect={onSelect}\n          node={documentNode}\n        />\n\n        <div className=\"c_controls\">\n          <h2>Editor Methods</h2>\n          <input\n            className=\"c_filter\"\n            onChange={({ currentTarget }) => setFilterBy(currentTarget.value)}\n            placeholder=\"Filter...\"\n            value={filterBy}\n          />\n          <div className=\"scroll\">\n            {\n              filteredMethodNames.map(key => {\n                const args = methodState[key];\n\n                return (\n                  <div className=\"c_control\" key={key}>\n                    {\n                      (args as unknown[]).map((arg, i) => {\n                        return typeof arg === 'string' || typeof arg === 'number' ? (\n                          <input\n                            key={i}\n                            onChange={({ currentTarget }) => {\n                              const payload = args.slice();\n\n                              const argValue = typeof payload[i] === 'number'\n                                ? isNaN(Number(currentTarget.value)) ? payload[i] : Number(currentTarget.value)\n                                : currentTarget.value;\n\n                              payload[i] = argValue;\n\n                              const action = {\n                                type: key,\n                                payload,\n                              } as Action;\n\n                              dispatch(action);\n                            }}\n                            value={arg}\n                          />\n                        ) : null\n                      })\n                    }\n                    <button\n                      onClick={onClick(editorRef.current!, key as keyof State, ...args)}\n                    >{key}({stringifyArgs(args)})\n                  </button>\n                  </div>\n                )\n              })\n            }\n\n            <h2>Additional Methods</h2>\n            <ul className=\"c_additional-methods\">\n              {\n                filteredAdditionalMethodNames\n                  .map(method => <li key={method}>{method}</li>)\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Node as SlateNode } from 'slate';\nimport { Node } from '.';\nimport { Node as DataNode } from '../data/utils';\n\nexport interface DocumentProps {\n  node: DataNode;\n  onSelect: (node: SlateNode) => void;\n}\n\nconst Document: React.FC<DocumentProps> = ({\n  node,\n  onSelect,\n}) => {\n  return (\n    <div className=\"c_document\">\n      <h2>Document</h2>\n      <div className=\"scroll\">\n        <Node\n          onSelect={onSelect}\n          node={node}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Document;","import React from 'react';\nimport { Node as SlateNode } from 'slate';\nimport { Node as DataNode } from '../data/utils';\n\nexport interface NodeProps {\n  node: DataNode,\n  onSelect: (node: SlateNode) => void,\n}\n\nconst Node: React.FC<NodeProps> = ({\n  node,\n  onSelect,\n}) => {\n  const {\n    _slateNode,\n    isSelected,\n    nodes = [],\n    ...rest\n  } = node;\n  const nodeStr = JSON.stringify(rest, undefined, 2);\n\n  return (\n    <pre\n      className={`c_node${node.isSelected ? ' selected' : ''}`}\n      onClick={event => {\n        event.stopPropagation();\n        onSelect(node._slateNode);\n      }}\n    >\n      {\n        node.object === 'text'\n          ? nodeStr.replace(/}$/, '},')\n          : nodeStr.replace(/\\n}$/, ',\\n  \"nodes\": [')\n      }\n      <pre className=\"c_node-list\">\n        {\n          nodes.map(child => (\n            <React.Fragment\n              key={child.key}\n            >\n              <Node\n                onSelect={onSelect}\n                node={child}\n              />\n            </React.Fragment>\n          ))\n        }\n      </pre>\n      { node.object !== 'text' && '  ]\\n}' }\n    </pre>\n  );\n}\n\nexport default Node;","import React from 'react';\nimport { Selection as SlateSelection } from 'slate';\n\nexport interface SelectionProps {\n  selection: SlateSelection;\n}\n\nconst Selection: React.FC<SelectionProps> = ({\n  selection,\n}) => {\n  const selectionJson = selection.toJS();\n\n  selectionJson.anchor = {\n    key: selection.anchor.key,\n    ...selectionJson.anchor,\n  };\n\n  selectionJson.focus = {\n    key: selection.focus.key,\n    ...selectionJson.focus,\n  };\n\n  return (\n    <div className=\"c_selection\">\n      <h2>Selection</h2>\n      <pre>\n        {\n          JSON.stringify(selectionJson, undefined, 2)\n        }\n      </pre>\n    </div>\n  );\n}\n\nexport default Selection;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-open-sans';\nimport './index.scss';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}