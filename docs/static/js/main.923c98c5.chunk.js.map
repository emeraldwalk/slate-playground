{"version":3,"sources":["data/filter.ts","data/methods.ts","data/utils.ts","data/value.ts","components/App.tsx","data/node.ts","components/Document.tsx","components/Node.tsx","components/Selection.tsx","serviceWorker.ts","index.tsx"],"names":["useFilter","data","filterBy","filter","useCallback","method","toLowerCase","indexOf","useMemo","initialState","node","insertBlock","insertInline","insertText","moveAnchorBackward","moveAnchorForward","moveAnchorTo","moveAnchorToEndOfBlock","moveAnchorToEndOfDocument","moveAnchorToEndOfInline","moveAnchorToEndOfNextBlock","moveAnchorToEndOfNextInline","moveAnchorToEndOfNextText","moveAnchorToEndOfNode","moveAnchorToEndOfPreviousBlock","moveAnchorToEndOfPreviousInline","moveAnchorToEndOfPreviousText","moveAnchorToEndOfText","moveAnchorToStartOfBlock","moveAnchorToStartOfDocument","moveAnchorToStartOfInline","moveAnchorToStartOfNextBlock","moveAnchorToStartOfNextInline","moveAnchorToStartOfNextText","moveAnchorToStartOfNode","moveAnchorToStartOfPreviousBlock","moveAnchorToStartOfPreviousInline","moveAnchorToStartOfPreviousText","moveAnchorToStartOfText","moveAnchorWordBackward","moveAnchorWordForward","moveBackward","moveEndBackward","moveEndForward","moveEndTo","moveEndToEndOfBlock","moveEndToEndOfDocument","moveEndToEndOfInline","moveEndToEndOfNextBlock","moveEndToEndOfNextInline","moveEndToEndOfNextText","moveEndToEndOfNode","moveEndToEndOfPreviousBlock","moveEndToEndOfPreviousInline","moveEndToEndOfPreviousText","moveEndToEndOfText","moveEndToStartOfBlock","moveEndToStartOfDocument","moveEndToStartOfInline","moveEndToStartOfNextBlock","moveEndToStartOfNextInline","moveEndToStartOfNextText","moveEndToStartOfNode","moveEndToStartOfPreviousBlock","moveEndToStartOfPreviousInline","moveEndToStartOfPreviousText","moveEndToStartOfText","moveEndWordBackward","moveEndWordForward","moveFocusBackward","moveFocusForward","moveFocusTo","moveFocusToEndOfBlock","moveFocusToEndOfDocument","moveFocusToEndOfInline","moveFocusToEndOfNextBlock","moveFocusToEndOfNextInline","moveFocusToEndOfNextText","moveFocusToEndOfNode","moveFocusToEndOfPreviousBlock","moveFocusToEndOfPreviousInline","moveFocusToEndOfPreviousText","moveFocusToEndOfText","moveFocusToStartOfBlock","moveFocusToStartOfDocument","moveFocusToStartOfInline","moveFocusToStartOfNextBlock","moveFocusToStartOfNextInline","moveFocusToStartOfNextText","moveFocusToStartOfNode","moveFocusToStartOfPreviousBlock","moveFocusToStartOfPreviousInline","moveFocusToStartOfPreviousText","moveFocusToStartOfText","moveFocusWordBackward","moveFocusWordForward","moveForward","moveNodeByKey","moveNodeByPath","List","moveStartBackward","moveStartForward","moveStartTo","key","moveStartToEndOfBlock","moveStartToEndOfDocument","moveStartToEndOfInline","moveStartToEndOfNextBlock","moveStartToEndOfNextInline","moveStartToEndOfNextText","moveStartToEndOfNode","moveStartToEndOfPreviousBlock","moveStartToEndOfPreviousInline","moveStartToEndOfPreviousText","moveStartToEndOfText","moveStartToStartOfBlock","moveStartToStartOfDocument","moveStartToStartOfInline","moveStartToStartOfNextBlock","moveStartToStartOfNextInline","moveStartToStartOfNextText","moveStartToStartOfNode","moveStartToStartOfPreviousBlock","moveStartToStartOfPreviousInline","moveStartToStartOfPreviousText","moveStartToStartOfText","moveStartWordBackward","moveStartWordForward","moveTo","moveToAnchor","moveToEnd","moveToEndOfBlock","moveToEndOfDocument","moveToEndOfInline","moveToEndOfNextBlock","moveToEndOfNextInline","moveToEndOfNextText","moveToEndOfNode","moveToEndOfPreviousBlock","moveToEndOfPreviousInline","moveToEndOfPreviousText","moveToEndOfText","moveToFocus","moveToRangeOfDocument","moveToRangeOfNode","moveToStart","moveToStartOfBlock","moveToStartOfDocument","moveToStartOfInline","moveToStartOfNextBlock","moveToStartOfNextInline","moveToStartOfNextText","moveToStartOfNode","moveToStartOfPreviousBlock","moveToStartOfPreviousInline","moveToStartOfPreviousText","moveToStartOfText","moveWordBackward","moveWordForward","splitBlock","undo","reducer","state","action","type","payload","selectedTextNodes","nodeTree","selectedKeys","path","object","isSelected","text","_slateNode","childNodes","nodes","toArray","map","child","i","toJSON","every","value","stack","document","isInSelection","length","shift","selection","start","unshift","end","initialValue","Value","fromJS","onClick","editor","args","focus","App","editorRef","useRef","useState","setValue","useValue","setFilterBy","selectedNodes","Array","from","selectedTextKeys","n","documentNode","useDocument","useReducer","methodState","dispatch","pendingMethodState","dispatchPending","additionalMethodNames","setAdditionalMethodNames","methodNames","Object","keys","useEffect","notInMethodNames","sort","useMethodState","current","getFirstText","filteredAdditionalMethodNames","filteredMethodNames","onSelect","className","onChange","ref","currentTarget","placeholder","pendingArgs","currentArgs","pendingArg","join","title","onBlur","slice","isNaN","values","String","split","v","Number","trim","some","a","Document","Node","rest","nodeStr","JSON","stringify","undefined","event","stopPropagation","replace","Fragment","Selection","selectionJson","toJS","anchor","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.923c98c5.chunk.js","sourcesContent":["import { useCallback, useMemo } from 'react';\n\nexport function useFilter<\n  T extends string,\n>(\n  data: T[],\n  filterBy: string,\n) {\n  const filter = useCallback((method: string) => {\n    return filterBy === '' || method.toLowerCase().indexOf(filterBy.toLowerCase()) > -1;\n  }, [filterBy]);\n\n  return useMemo(\n    () => data.filter(filter),\n    [data, filter],\n  );\n}","import { useEffect, useMemo, useReducer, useState } from 'react';\nimport { Node } from 'slate';\nimport { Editor } from 'slate-react';\nimport { List } from 'immutable';\n\ntype MethodKey = { [P in keyof Required<Editor>]: Editor[P] extends Function ? P : never }[keyof Editor];\n\nexport type Action = {\n  [P in MethodKey]: {\n    type: P,\n    payload: State[P],\n  }\n}[MethodKey];\n\nexport type State = {\n  [P in MethodKey]: Editor[P] extends (...args: infer A) => any\n    ? A\n    : never\n};\n\nconst initialState = (\n  node: Node,\n): Partial<State> => ({\n  insertBlock: ['div'],\n  insertInline: ['span'],\n  insertText: [''],\n  moveAnchorBackward: [1],\n  moveAnchorForward: [1],\n  moveAnchorTo: [''],\n  moveAnchorToEndOfBlock: [],\n  moveAnchorToEndOfDocument: [],\n  moveAnchorToEndOfInline: [],\n  moveAnchorToEndOfNextBlock: [],\n  moveAnchorToEndOfNextInline: [],\n  moveAnchorToEndOfNextText: [],\n  moveAnchorToEndOfNode: [node],\n  moveAnchorToEndOfPreviousBlock: [],\n  moveAnchorToEndOfPreviousInline: [],\n  moveAnchorToEndOfPreviousText: [],\n  moveAnchorToEndOfText: [],\n  moveAnchorToStartOfBlock: [],\n  moveAnchorToStartOfDocument: [],\n  moveAnchorToStartOfInline: [],\n  moveAnchorToStartOfNextBlock: [],\n  moveAnchorToStartOfNextInline: [],\n  moveAnchorToStartOfNextText: [],\n  moveAnchorToStartOfNode: [node],\n  moveAnchorToStartOfPreviousBlock: [],\n  moveAnchorToStartOfPreviousInline: [],\n  moveAnchorToStartOfPreviousText: [],\n  moveAnchorToStartOfText: [],\n  moveAnchorWordBackward: [],\n  moveAnchorWordForward: [],\n  moveBackward: [1],\n  moveEndBackward: [1],\n  moveEndForward: [1],\n  moveEndTo: ['', 0],\n  moveEndToEndOfBlock: [],\n  moveEndToEndOfDocument: [],\n  moveEndToEndOfInline: [],\n  moveEndToEndOfNextBlock: [],\n  moveEndToEndOfNextInline: [],\n  moveEndToEndOfNextText: [],\n  moveEndToEndOfNode: [node],\n  moveEndToEndOfPreviousBlock: [],\n  moveEndToEndOfPreviousInline: [],\n  moveEndToEndOfPreviousText: [],\n  moveEndToEndOfText: [],\n  moveEndToStartOfBlock: [],\n  moveEndToStartOfDocument: [],\n  moveEndToStartOfInline: [],\n  moveEndToStartOfNextBlock: [],\n  moveEndToStartOfNextInline: [],\n  moveEndToStartOfNextText: [],\n  moveEndToStartOfNode: [node],\n  moveEndToStartOfPreviousBlock: [],\n  moveEndToStartOfPreviousInline: [],\n  moveEndToStartOfPreviousText: [],\n  moveEndToStartOfText: [],\n  moveEndWordBackward: [],\n  moveEndWordForward: [],\n  moveFocusBackward: [1],\n  moveFocusForward: [1],\n  moveFocusTo: ['', 0],\n  moveFocusToEndOfBlock: [],\n  moveFocusToEndOfDocument: [],\n  moveFocusToEndOfInline: [],\n  moveFocusToEndOfNextBlock: [],\n  moveFocusToEndOfNextInline: [],\n  moveFocusToEndOfNextText: [],\n  moveFocusToEndOfNode: [node],\n  moveFocusToEndOfPreviousBlock: [],\n  moveFocusToEndOfPreviousInline: [],\n  moveFocusToEndOfPreviousText: [],\n  moveFocusToEndOfText: [],\n  moveFocusToStartOfBlock: [],\n  moveFocusToStartOfDocument: [],\n  moveFocusToStartOfInline: [],\n  moveFocusToStartOfNextBlock: [],\n  moveFocusToStartOfNextInline: [],\n  moveFocusToStartOfNextText: [],\n  moveFocusToStartOfNode: [node],\n  moveFocusToStartOfPreviousBlock: [],\n  moveFocusToStartOfPreviousInline: [],\n  moveFocusToStartOfPreviousText: [],\n  moveFocusToStartOfText: [],\n  moveFocusWordBackward: [],\n  moveFocusWordForward: [],\n  moveForward: [1],\n  moveNodeByKey: ['', '', 0],\n  moveNodeByPath: [List<number>([0, 0]), List<number>([0, 0]), 0],\n  moveStartBackward: [1],\n  moveStartForward: [1],\n  moveStartTo: [node.key, 0],\n  moveStartToEndOfBlock: [],\n  moveStartToEndOfDocument: [],\n  moveStartToEndOfInline: [],\n  moveStartToEndOfNextBlock: [],\n  moveStartToEndOfNextInline: [],\n  moveStartToEndOfNextText: [],\n  moveStartToEndOfNode: [node],\n  moveStartToEndOfPreviousBlock: [],\n  moveStartToEndOfPreviousInline: [],\n  moveStartToEndOfPreviousText: [],\n  moveStartToEndOfText: [],\n  moveStartToStartOfBlock: [],\n  moveStartToStartOfDocument: [],\n  moveStartToStartOfInline: [],\n  moveStartToStartOfNextBlock: [],\n  moveStartToStartOfNextInline: [],\n  moveStartToStartOfNextText: [],\n  moveStartToStartOfNode: [node],\n  moveStartToStartOfPreviousBlock: [],\n  moveStartToStartOfPreviousInline: [],\n  moveStartToStartOfPreviousText: [],\n  moveStartToStartOfText: [],\n  moveStartWordBackward: [],\n  moveStartWordForward: [],\n  moveTo: [''],\n  moveToAnchor: [],\n  moveToEnd: [],\n  moveToEndOfBlock: [],\n  moveToEndOfDocument: [],\n  moveToEndOfInline: [],\n  moveToEndOfNextBlock: [],\n  moveToEndOfNextInline: [],\n  moveToEndOfNextText: [],\n  moveToEndOfNode: [node],\n  moveToEndOfPreviousBlock: [],\n  moveToEndOfPreviousInline: [],\n  moveToEndOfPreviousText: [],\n  moveToEndOfText: [],\n  moveToFocus: [],\n  moveToRangeOfDocument: [],\n  moveToRangeOfNode: [node],\n  moveToStart: [],\n  moveToStartOfBlock: [],\n  moveToStartOfDocument: [],\n  moveToStartOfInline: [],\n  moveToStartOfNextBlock: [],\n  moveToStartOfNextInline: [],\n  moveToStartOfNextText: [],\n  moveToStartOfNode: [node],\n  moveToStartOfPreviousBlock: [],\n  moveToStartOfPreviousInline: [],\n  moveToStartOfPreviousText: [],\n  moveToStartOfText: [],\n  moveWordBackward: [],\n  moveWordForward: [],\n  splitBlock: [1],\n  undo: [],\n});\n\nfunction reducer(\n  state: Partial<State>,\n  action: Action,\n) {\n  return {\n    ...state,\n    [action.type]: action.payload,\n  };\n}\n\nexport function useMethodState(\n  editor: Editor | null,\n  node: Node,\n) {\n  const [methodState, dispatch] = useReducer(reducer, initialState(node));\n  const [pendingMethodState, dispatchPending] = useReducer(reducer, methodState);\n  const [additionalMethodNames, setAdditionalMethodNames] = useState<string[]>([]);\n\n  const methodNames = useMemo(\n    () => Object.keys(methodState) as (keyof State)[],\n    [methodState],\n  );\n\n  useEffect(() => {\n    if (editor) {\n      const notInMethodNames = Object\n        .keys(editor)\n        .filter(key => typeof editor[key as keyof Editor] === 'function' && !(key in methodState));\n\n      notInMethodNames.sort();\n\n      setAdditionalMethodNames(notInMethodNames);\n    }\n  }, [editor, methodState]);\n\n  return {\n    additionalMethodNames,\n    dispatch,\n    dispatchPending,\n    methodNames,\n    methodState,\n    pendingMethodState,\n  };\n}","import {\n  Node as SlateNode,\n  NodeJSON,\n  Value,\n} from 'slate';\n\nexport type Node = {\n  isSelected: boolean,\n  nodes?: Node[],\n  path: number[],\n  _slateNode: SlateNode\n} & NodeJSON;\n\n/**\n * Transform a Slate node tree into a data model.\n */\nexport function nodeTree(\n  node: SlateNode,\n  selectedKeys: string[],\n  path: number[],\n): Node {\n  if (node.object === 'text') {\n    return {\n      key: node.key,\n      path,\n      isSelected: selectedKeys.indexOf(node.key) > -1,\n      object: node.object,\n      text: node.text,\n      _slateNode: node,\n    };\n  }\n\n  const childNodes = node.nodes.toArray().map(\n    (child, i) => nodeTree(child, selectedKeys, [...path, i]),\n  );\n\n  return {\n    key: node.key,\n    path,\n    ...node.toJSON() as any,\n    isSelected: childNodes.every(childNodes => childNodes.isSelected),\n    nodes: childNodes,\n    _slateNode: node,\n  };\n}\n\n/**\n * Get an iterable that yields selected text nodes.\n * @param value\n */\nexport function* selectedTextNodes(value: Value): IterableIterator<SlateNode> {\n  const stack: SlateNode[] = [value.document];\n\n  let isInSelection = false;\n\n  while (stack.length > 0) {\n    const node = stack.shift()!;\n\n    if (node.key === value.selection.start.key) {\n      isInSelection = true;\n    }\n\n    if (node.object !== 'text') {\n      stack.unshift(...node.nodes.toArray());\n    }\n    else if (isInSelection) {\n      yield node;\n    }\n\n    if (node.key === value.selection.end.key) {\n      isInSelection = false;\n    }\n  }\n}","import { useState } from 'react';\nimport { Value } from 'slate';\n\nconst initialValue: Value = Value.fromJS({\n  document: {\n    nodes: [\n      {\n        nodes: [\n          {\n            nodes: [\n              {\n                object: 'text',\n                text: 'Block A1',\n              },\n            ],\n            object: 'block',\n            type: 'paragraph',\n          },\n          {\n            nodes: [\n              {\n                object: 'text',\n                text: 'Block A2',\n              },\n            ],\n            object: 'block',\n            type: 'paragraph',\n          }\n        ],\n        object: 'block',\n        type: 'div',\n      },\n      {\n        nodes: [\n          {\n            object: 'text',\n            text: 'Block B',\n          },\n        ],\n        object: 'block',\n        type: 'paragraph',\n      },\n      {\n        nodes: [\n          {\n            object: 'text',\n            text: 'Block C'\n          },\n        ],\n        object: 'block',\n        type: 'paragraph',\n      }\n    ]\n  }\n});\n\nexport function useValue() {\n  const [value, setValue] = useState(initialValue);\n  return {\n    initialValue,\n    setValue,\n    value,\n  }\n}","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Editor, OnChangeParam } from 'slate-react';\nimport { Node as SlateNode } from 'slate';\nimport { List } from 'immutable';\nimport { Document, Selection } from '.';\nimport { useFilter } from '../data/filter';\nimport { Action, useMethodState, State } from '../data/methods';\nimport { useDocument } from '../data/node';\nimport { useValue } from '../data/value';\n\nfunction onClick<M extends keyof State>(\n  editor: Editor | null,\n  method: M,\n  ...args: State[M]\n) {\n  return function doOnClick() {\n    (editor?.[method] as any)(...args);\n    editor?.focus();\n  }\n}\n\nfunction stringifyArgs(args: unknown[]) {\n  return args.map(\n    a =>\n      typeof a === 'string' ? `'${a}'`\n        : typeof a === 'number' ? a\n          : a instanceof List ? `List([${(a as any).toArray()}])`\n            : typeof a === 'object' ? '[selected node]'\n              : String(a)\n  ).join(', ');\n}\n\nconst App: React.FC = () => {\n  const editorRef = useRef<Editor>(null);\n\n  const { initialValue, setValue, value } = useValue();\n  const [filterBy, setFilterBy] = useState('');\n\n  const { documentNode, selectedNodes } = useDocument(value);\n\n  const {\n    additionalMethodNames,\n    dispatch,\n    dispatchPending,\n    methodNames,\n    methodState,\n    pendingMethodState,\n  } = useMethodState(editorRef.current, selectedNodes[0] || value.document.getFirstText());\n\n  const filteredAdditionalMethodNames = useFilter(\n    additionalMethodNames,\n    filterBy\n  );\n\n  const filteredMethodNames = useFilter(\n    methodNames,\n    filterBy\n  );\n\n  const onSelect = useCallback((node: SlateNode) => {\n    editorRef.current!.moveAnchorToStartOfNode(node);\n    editorRef.current!.moveFocusToEndOfNode(node);\n\n    editorRef.current!.focus();\n  }, []);\n\n  useEffect(() => {\n    editorRef.current?.focus();\n  }, []);\n\n  return (\n    <div className=\"c_app\">\n      <div className=\"row\">\n        <div className=\"main\">\n          <h1>SlateJS Playground</h1>\n\n          <div className=\"row\">\n            <Editor\n              className=\"c_editor\"\n              onChange={({ value }: OnChangeParam) => {\n                setValue(value);\n              }}\n              ref={editorRef}\n              value={value}\n            />\n            <button onClick={() => {\n              setValue(initialValue);\n            }}>Reset</button>\n          </div>\n\n          <div className=\"data row\">\n            <Selection\n              selection={value.selection}\n            />\n\n            <Document\n              onSelect={onSelect}\n              node={documentNode}\n            />\n          </div>\n        </div>\n\n        <div className=\"sidebar\">\n          <div className=\"c_controls\">\n            <h2>Editor Methods</h2>\n            <input\n              className=\"c_filter\"\n              onChange={({ currentTarget }) => setFilterBy(currentTarget.value)}\n              placeholder=\"Filter...\"\n              value={filterBy}\n            />\n            <div className=\"scroll\">\n              {\n                filteredMethodNames.map(key => {\n                  const pendingArgs = pendingMethodState[key]!;\n                  const currentArgs = methodState[key]!;\n\n                  return (\n                    <div className=\"c_control\" key={key}>\n                      {\n                        (pendingArgs as unknown[]).map((pendingArg, i) => {\n                          if (pendingArg instanceof List) {\n                            pendingArg = (pendingArg as any).toArray().join(',');\n                          }\n\n                          let title = typeof currentArgs[i] as string;\n                          if (title === 'object' && currentArgs[i] instanceof List) {\n                            title = 'List';\n                          }\n\n                          return typeof pendingArg === 'string' || typeof pendingArg === 'number' ? (\n                            <input\n                              key={i}\n                              onBlur={() => {\n                                const payload = pendingArgs.slice();\n\n                                if (typeof currentArgs[i] === 'number' && isNaN(payload[i])) {\n                                  payload[i] = currentArgs[i];\n                                }\n                                else if (currentArgs[i] instanceof List) {\n                                  const values = String(pendingArgs[i]).split(',').map(v => Number(v.trim()));\n                                  if (values.some(isNaN)) {\n                                    payload[i] = currentArgs[i];\n                                  }\n                                  else {\n                                    payload[i] = List(values);\n                                  }\n                                }\n\n                                const action = {\n                                  type: key,\n                                  payload,\n                                } as Action;\n\n                                dispatchPending(action);\n                                dispatch(action);\n                              }}\n                              onChange={({ currentTarget }) => {\n                                const payload = pendingArgs.slice();\n                                payload[i] = currentTarget.value;\n\n                                const action = {\n                                  type: key,\n                                  payload,\n                                } as Action;\n\n                                dispatchPending(action);\n                              }}\n                              title={title}\n                              value={pendingArg}\n                            />\n                          ) : null\n                        })\n                      }\n                      <button\n                        onClick={onClick(editorRef.current!, key as keyof State, ...pendingArgs)}\n                      >{key}({stringifyArgs(currentArgs)})\n                  </button>\n                    </div>\n                  )\n                })\n              }\n\n              <h2>TODO: Additional Methods</h2>\n              <ul className=\"c_additional-methods\">\n                {\n                  filteredAdditionalMethodNames\n                    .map(method => <li key={method}>{method}</li>)\n                }\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n      <footer className=\"footer\">\n        <span>slate v0.47.9 slate-react v0.22.10</span>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { useMemo } from 'react';\nimport { Value } from 'slate';\nimport { nodeTree, selectedTextNodes } from './utils';\n\nexport function useDocument(\n  value: Value,\n) {\n  return useMemo(\n    () => {\n      const selectedNodes = Array.from(selectedTextNodes(value));\n      const selectedTextKeys = selectedNodes.map(n => n.key);\n\n      return {\n        documentNode: nodeTree(value.document, selectedTextKeys, []),\n        selectedNodes,\n      };\n    },\n    [value]\n  );\n}","import React from 'react';\nimport { Node as SlateNode } from 'slate';\nimport { Node } from '.';\nimport { Node as DataNode } from '../data/utils';\n\nexport interface DocumentProps {\n  node: DataNode;\n  onSelect: (node: SlateNode) => void;\n}\n\nconst Document: React.FC<DocumentProps> = ({\n  node,\n  onSelect,\n}) => {\n  return (\n    <div className=\"c_document\">\n      <h2>Document</h2>\n      <div className=\"scroll\">\n        <Node\n          onSelect={onSelect}\n          node={node}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Document;","import React from 'react';\nimport { Node as SlateNode } from 'slate';\nimport { Node as DataNode } from '../data/utils';\n\nexport interface NodeProps {\n  node: DataNode,\n  onSelect: (node: SlateNode) => void,\n}\n\nconst Node: React.FC<NodeProps> = ({\n  node,\n  onSelect,\n}) => {\n  const {\n    _slateNode,\n    isSelected,\n    nodes = [],\n    ...rest\n  } = node;\n  const nodeStr = JSON.stringify(rest, undefined, 2);\n\n  return (\n    <pre\n      className={`c_node${node.isSelected ? ' selected' : ''}`}\n      onClick={event => {\n        event.stopPropagation();\n        onSelect(node._slateNode);\n      }}\n    >\n      {\n        node.object === 'text'\n          ? nodeStr.replace(/}$/, '},')\n          : nodeStr.replace(/\\n}$/, ',\\n  \"nodes\": [')\n      }\n      <pre className=\"c_node-list\">\n        {\n          nodes.map(child => (\n            <React.Fragment\n              key={child.key}\n            >\n              <Node\n                onSelect={onSelect}\n                node={child}\n              />\n            </React.Fragment>\n          ))\n        }\n      </pre>\n      { node.object !== 'text' && '  ]\\n}' }\n    </pre>\n  );\n}\n\nexport default Node;","import React from 'react';\nimport { Selection as SlateSelection } from 'slate';\n\nexport interface SelectionProps {\n  selection: SlateSelection;\n}\n\nconst Selection: React.FC<SelectionProps> = ({\n  selection,\n}) => {\n  const selectionJson = selection.toJS();\n\n  selectionJson.anchor = {\n    key: selection.anchor.key,\n    ...selectionJson.anchor,\n  };\n\n  selectionJson.focus = {\n    key: selection.focus.key,\n    ...selectionJson.focus,\n  };\n\n  return (\n    <div className=\"c_selection\">\n      <h2>Selection</h2>\n      <pre>\n        {\n          JSON.stringify(selectionJson, undefined, 2)\n        }\n      </pre>\n    </div>\n  );\n}\n\nexport default Selection;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-open-sans';\nimport './index.scss';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}