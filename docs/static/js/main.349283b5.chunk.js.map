{"version":3,"sources":["utils/data.ts","components/App.tsx","components/Node.tsx","serviceWorker.ts","index.tsx"],"names":["selectedTextNodes","value","stack","document","isInSelection","length","node","shift","key","selection","start","object","unshift","nodes","toArray","end","initialValue","Value","fromJS","text","type","initialState","moveToStartOfDocument","moveToEndOfDocument","moveAnchorForward","moveFocusForward","moveStartForward","moveEndForward","moveStartToStartOfDocument","moveStartToEndOfDocument","moveEndToStartOfDocument","moveEndToEndOfDocument","moveAnchorToStartOfDocument","moveAnchorToEndOfDocument","moveFocusToStartOfDocument","moveFocusToEndOfDocument","moveToStartOfNextBlock","moveToEndOfNextBlock","splitBlock","insertText","reducer","state","action","payload","onClick","editor","method","args","focus","App","editorRef","useRef","useState","setValue","useReducer","dispatch","additionalMethodNames","setAdditionalMethodNames","filterMethodsBy","setFilterMethodsBy","filter","useCallback","toLowerCase","indexOf","useMemo","selectedTextKeys","Array","from","map","n","nodeTree","selectedKeys","isSelected","_slateNode","childNodes","child","toJSON","every","onSelect","current","moveAnchorToStartOfNode","moveFocusToEndOfNode","useEffect","methodNames","Object","keys","sort","className","onChange","ref","currentTarget","placeholder","arg","i","slice","argValue","isNaN","Number","a","stringifyArgs","Node","rest","nodeStr","JSON","stringify","undefined","event","stopPropagation","replace","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.349283b5.chunk.js","sourcesContent":["import {\n  Node as SlateNode,\n  NodeJSON,\n  Value,\n} from 'slate';\n\nexport type Node = { isSelected: boolean, nodes?: Node[], _slateNode: SlateNode } & NodeJSON;\n\n/**\n * Transform a Slate node tree into a data model.\n */\nexport function nodeTree(\n  node: SlateNode,\n  selectedKeys: string[]\n): Node {\n  if (node.object === 'text') {\n    return {\n      key: node.key,\n      isSelected: selectedKeys.indexOf(node.key) > -1,\n      object: node.object,\n      _slateNode: node,\n    };\n  }\n\n  const childNodes = node.nodes.toArray().map(\n    child => nodeTree(child, selectedKeys),\n  );\n\n  return {\n    key: node.key,\n    ...node.toJSON() as any,\n    isSelected: childNodes.every(childNodes => childNodes.isSelected),\n    nodes: childNodes,\n    _slateNode: node,\n  };\n}\n\n/**\n * Get an iterable that yields selected text nodes.\n * @param value\n */\nexport function* selectedTextNodes(value: Value): IterableIterator<SlateNode> {\n  const stack: SlateNode[] = [value.document];\n\n  let isInSelection = false;\n\n  while (stack.length > 0) {\n    const node = stack.shift()!;\n\n    if (node.key === value.selection.start.key) {\n      isInSelection = true;\n    }\n\n    if (node.object !== 'text') {\n      stack.unshift(...node.nodes.toArray());\n    }\n    else if (isInSelection) {\n      yield node;\n    }\n\n    if (node.key === value.selection.end.key) {\n      isInSelection = false;\n    }\n  }\n}","import React, { useCallback, useEffect, useMemo,  useReducer, useRef, useState } from 'react';\nimport { Editor, OnChangeParam } from 'slate-react';\nimport { Node as SlateNode, Value } from 'slate';\nimport { Node } from '.';\nimport { nodeTree, selectedTextNodes } from '../utils/data';\n\nconst initialValue: Value = Value.fromJS({\n  document: {\n    nodes: [\n      {\n        nodes: [\n          {\n            nodes: [\n              {\n                object: 'text',\n                text: 'Block A1',\n              },\n            ],\n            object: 'block',\n            type: 'paragraph',\n          },\n          {\n            nodes: [\n              {\n                object: 'text',\n                text: 'Block A2',\n              },\n            ],\n            object: 'block',\n            type: 'paragraph',\n          }\n        ],\n        object: 'block',\n        type: 'div',\n      },\n      {\n        nodes: [\n          {\n            object: 'text',\n            text: 'Block B',\n          },\n        ],\n        object: 'block',\n        type: 'paragraph',\n      },\n      {\n        nodes: [\n          {\n            object: 'text',\n            text: 'Block C'\n          },\n        ],\n        object: 'block',\n        type: 'paragraph',\n      }\n    ]\n  }\n});\n\ntype Action = {\n  [P in keyof State]: { type: P, payload: State[P] }\n}[keyof State];\n\ninterface State {\n  insertText: [string],\n  moveAnchorForward: [number],\n  moveAnchorToEndOfDocument: [],\n  moveAnchorToStartOfDocument: [],\n  moveEndForward: [number],\n  moveEndToEndOfDocument: [],\n  moveEndToStartOfDocument: [],\n  moveFocusForward: [number],\n  moveFocusToEndOfDocument: [],\n  moveFocusToStartOfDocument: [],\n  moveStartForward: [number],\n  moveStartToEndOfDocument: [],\n  moveStartToStartOfDocument: [],\n  moveToEndOfDocument: [],\n  moveToStartOfDocument: [],\n  moveToStartOfNextBlock: [],\n  moveToEndOfNextBlock: [],\n  splitBlock: [number],\n}\n\nconst initialState: State = {\n  moveToStartOfDocument: [],\n  moveToEndOfDocument: [],\n  moveAnchorForward: [1],\n  moveFocusForward: [1],\n  moveStartForward: [1],\n  moveEndForward: [1],\n\n  moveStartToStartOfDocument: [],\n  moveStartToEndOfDocument: [],\n  moveEndToStartOfDocument: [],\n  moveEndToEndOfDocument: [],\n\n  moveAnchorToStartOfDocument: [],\n  moveAnchorToEndOfDocument: [],\n  moveFocusToStartOfDocument: [],\n  moveFocusToEndOfDocument: [],\n\n  moveToStartOfNextBlock: [],\n  moveToEndOfNextBlock: [],\n  splitBlock: [1],\n  insertText: [''],\n};\n\nfunction reducer(\n  state: State,\n  action: Action,\n) {\n  return {\n    ...state,\n    [action.type]: action.payload,\n  };\n}\n\nfunction onClick<M extends keyof State>(\n  editor: Editor | null,\n  method: M,\n  ...args: State[M]\n) {\n  return function doOnClick() {\n    (editor?.[method] as any)(...args);\n    editor?.focus();\n  }\n}\n\n\n\nfunction stringifyArgs(args: unknown[]) {\n  return args.map(a => typeof a === 'string' ? `'${a}'` : a);\n}\n\nconst App: React.FC = () => {\n  const editorRef = useRef<Editor>(null);\n  const [value, setValue] = useState(initialValue);\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const [additionalMethodNames, setAdditionalMethodNames] = useState<string[]>([]);\n  const [filterMethodsBy, setFilterMethodsBy] = useState('');\n\n  const filter = useCallback((method: string) => {\n    return filterMethodsBy === '' || method.toLowerCase().indexOf(filterMethodsBy.toLowerCase()) > -1;\n  }, [filterMethodsBy]);\n\n  const node = useMemo(\n    () => {\n      const selectedTextKeys = Array.from(selectedTextNodes(value)).map(n => n.key);\n      return nodeTree(value.document, selectedTextKeys);\n    },\n    [value]\n  );\n\n  const onSelect = useCallback((node: SlateNode) => {\n    editorRef.current!.moveAnchorToStartOfNode(node);\n    editorRef.current!.moveFocusToEndOfNode(node);\n\n    editorRef.current!.focus();\n  }, []);\n\n  useEffect(() => {\n    editorRef.current?.focus();\n  }, []);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      const methodNames = Object\n        .keys(editorRef.current)\n        .filter(key => typeof editorRef.current![key as keyof Editor] === 'function' && !(key in state));\n\n      methodNames.sort();\n\n      setAdditionalMethodNames(methodNames);\n    }\n  }, [state]);\n\n  return (\n    <div className=\"c_app\">\n      <h1>SlateJS Editor Playground</h1>\n\n      <div className=\"row\">\n        <Editor\n          className=\"c_editor\"\n          onChange={({ value }: OnChangeParam) => {\n            setValue(value);\n          }}\n          ref={editorRef}\n          value={value}\n        />\n        <button onClick={() => setValue(initialValue)}>Reset</button>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"c_value\">\n          <h2>Value</h2>\n          <div className=\"scroll\">\n            <Node\n              onSelect={onSelect}\n              node={node}\n            />\n          </div>\n        </div>\n\n        <div className=\"c_controls\">\n          <h2>Editor Methods</h2>\n          <input\n            className=\"c_filter\"\n            onChange={({ currentTarget }) => setFilterMethodsBy(currentTarget.value)}\n            placeholder=\"Filter...\"\n            value={filterMethodsBy}\n          />\n          <div className=\"scroll\">\n            {\n              Object.keys(state).filter(filter).map(key => {\n                const args = state[key as keyof State];\n\n                return (\n                  <div className=\"c_control\" key={key}>\n                    {\n                      (args as unknown[]).map((arg, i) => {\n                        return typeof arg === 'string' || typeof arg === 'number' ? (\n                          <input\n                            key={i}\n                            onChange={({ currentTarget }) => {\n                              const payload = args.slice();\n\n                              const argValue = typeof payload[i] === 'number'\n                                ? isNaN(Number(currentTarget.value)) ? payload[i] : Number(currentTarget.value)\n                                : currentTarget.value;\n\n                              payload[i] = argValue;\n\n                              const action = {\n                                type: key,\n                                payload,\n                              } as Action;\n\n                              dispatch(action);\n                            }}\n                            value={arg}\n                          />\n                        ) : null\n                      })\n                    }\n                    <button\n                      onClick={onClick(editorRef.current!, key as keyof State, ...args)}\n                    >{key}({stringifyArgs(args)})\n                  </button>\n                  </div>\n                )\n              })\n            }\n\n            <h2>Additional Methods</h2>\n            <ul className=\"c_additional-methods\">\n              {\n                additionalMethodNames\n                  .filter(\n                    filter\n                  )\n                  .map(method => <li key={method}>{method}</li>)\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Node as SlateNode } from 'slate';\nimport { Node as DataNode } from '../utils/data';\n\nexport interface NodeProps {\n  node: DataNode,\n  onSelect: (node: SlateNode) => void,\n}\n\nconst Node: React.FC<NodeProps> = ({\n  node,\n  onSelect,\n}) => {\n  const {\n    _slateNode,\n    isSelected,\n    nodes = [],\n    ...rest\n  } = node;\n  const nodeStr = JSON.stringify(rest, undefined, 2);\n\n  return (\n    <pre\n      className={`c_node${node.isSelected ? ' selected' : ''}`}\n      onClick={event => {\n        event.stopPropagation();\n        onSelect(node._slateNode);\n      }}\n    >\n      {\n        node.object === 'text'\n          ? nodeStr.replace(/}$/, '},')\n          : nodeStr.replace(/\\n}$/, ',\\n  \"nodes\": [')\n      }\n      <pre className=\"c_node-list\">\n        {\n          nodes.map(child => (\n            <React.Fragment\n              key={child.key}\n            >\n              <Node\n                onSelect={onSelect}\n                node={child}\n              />\n            </React.Fragment>\n          ))\n        }\n      </pre>\n      { node.object !== 'text' && '  ]\\n}' }\n    </pre>\n  );\n}\n\nexport default Node;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-open-sans';\nimport './index.scss';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}